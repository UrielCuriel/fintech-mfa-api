name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: prod
    env:
      PIPELINE_ID: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the Docker image
        run: docker build . -t ${{ steps.login-ecr.outputs.registry }}/${{secrets.ECR_REPOSITORY}}:${{ env.PIPELINE_ID }} -t ${{ steps.login-ecr.outputs.registry }}/${{secrets.ECR_REPOSITORY}}:latest

      - name: Push the Docker image to Amazon ECR
        run: docker push --all-tags ${{ steps.login-ecr.outputs.registry }}/${{secrets.ECR_REPOSITORY}}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate Dockerrun.aws.json
      run: |
        cat > Dockerrun.aws.json << EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "${{ steps.login-ecr.outputs.registry }}/${{secrets.ECR_REPOSITORY}}:latest",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": 8000,
              "HostPort": 80
            }
          ],
          "Environment": [
            {
              "Name": "PORT",
              "Value": "8000"
            }
          ]
        }
        EOF

    - name: Generate deployment package
      run: zip deploy.zip Dockerrun.aws.json

    - name: Set Version Label
      run: echo "VERSION_LABEL=fintech-api-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Deploy to AWS Elastic BeanTalk
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: fintech-api
        environment_name: fintech-api-env
        version_label: ${{ env.VERSION_LABEL }}
        use_existing_version_if_available: true
        region: ${{ secrets.AWS_REGION }}
        deployment_package: deploy.zip